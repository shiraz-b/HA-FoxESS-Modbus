# FoxESS Modbus Plugin _ Configuration and Sensor Mappings
# Source https://github.com/StealthChesnut/HA_FoxESS_Modbus
# This file isn't a valid configuration file!

# Instructions:
# copy the custom_components directory to your HA custom_components directory
# Add ONE of the modbus: lines to your configuration.yaml
# Add the sensors below to your configuration.yaml 
#
# USB: Edit the file to update the connection settings
#
# LAN: Add a new secret to your secrets file - FoxESSInverterIP: <your inverter IP>


modbus: !include custom_components/HA-FoxESS-Modbus/modbusUSB.yaml
modbus: !include custom_components/HA-FoxESS-Modbus/modbusLAN.yaml

# Sensors turn power values into power/hour values for meters
sensor: 
  - method: left
    name: foxess_modbus_pv1_sum
    platform: integration
    round: 2
    source: sensor.foxess_modbus_pv1_power
    unit_time: h
  - method: left
    name: foxess_modbus_pv2_sum
    platform: integration
    round: 2
    source: sensor.foxess_modbus_pv2_power
    unit_time: h
  - method: left
    name: foxess_modbus_pv_total_sum
    platform: integration
    round: 2
    source: sensor.foxess_modbus_pv_power_now
    unit_time: h
  - method: left
    name: foxess_modbus_load_sum
    platform: integration
    round: 2
    source: sensor.foxess_modbus_load_power
    unit_time: h
  - method: left
    name: foxess_modbus_bat_charge_sum
    platform: integration
    round: 2
    source: sensor.foxess_modbus_battery_charge
    unit_time: h
  - method: left
    name: foxess_modbus_bat_discharge_sum
    platform: integration
    round: 2
    source: sensor.foxess_modbus_battery_discharge
    unit_time: h
  - method: left
    name: foxess_modbus_feedin_sum
    platform: integration
    round: 2
    source: sensor.foxess_modbus_feed_in_power
    unit_time: h
  - method: left
    name: foxess_modbus_grid_consumption_sum
    platform: integration
    round: 2
    source: sensor.foxess_modbus_grid_consumption
    unit_time: h

 # Templates enable math operations against states/values to give us better data
template:
  - sensor:
      - name: "foxess_modbus_battery_discharge"
        device_class: "power"
        unit_of_measurement: "kW"
        state: >
            {% if (states('sensor.foxess_modbus_battery_discharge_power') | float(default=0) ) > 0 %}
            {{ states('sensor.foxess_modbus_battery_discharge_power') | float(default=0) * 1 }}
            {% else %}
            0 
            {% endif %}
      - name: "foxess_modbus_battery_charge"
        device_class: "power"
        unit_of_measurement: "kW"
        state: >
            {% if (states('sensor.foxess_modbus_battery_discharge_power') | float(default=0) ) < 0 %}
            {{ states('sensor.foxess_modbus_battery_discharge_power') | float(default=0) * -1 }}
            {% else %}
            0 
            {% endif %}
      - name: "foxess_modbus_feed_in_power"
        device_class: "power"
        unit_of_measurement: "kW"
        state: >
            {% if (states('sensor.foxess_modbus_grid_ct') | float(default=0) ) > 0 %}
            {{ states('sensor.foxess_modbus_grid_ct') | float(default=0) * 1 }}
            {% else %}
            0 
            {% endif %}
      - name: "foxess_modbus_grid_consumption"
        device_class: "power"
        unit_of_measurement: "kW"
        state: >
            {% if (states('sensor.foxess_modbus_grid_ct') | float(default=0) ) < 0 %}
            {{ states('sensor.foxess_modbus_grid_ct') | float(default=0) * -1 }}
            {% else %}
            0 
            {% endif %}
      - name: "foxess_modbus_pv_power_now"
        device_class: "power"
        unit_of_measurement: "kW"
        state: >
              {{ (states('sensor.foxess_modbus_pv1_power') | float(default=0) + states('sensor.foxess_modbus_pv2_power') | float(default=0) ) * 1 }}
      - name: "foxess_modbus_pv_energy_daily"
        device_class: "energy"
        unit_of_measurement: "kWh"
        state: >
              {{ ((states('sensor.foxess_modbus_pv1_daily') | float(default=0) + states('sensor.foxess_modbus_pv2_daily') | float(default=0) ) * 1 ) | round(2) }} 
      - name: "foxess_modbus_system_losses"
        device_class: "power"
        unit_of_measurement: "kW"
        state: >
               {{ ((states('sensor.foxess_modbus_pv1_power') | float(default=0)
               + states('sensor.foxess_modbus_pv2_power') | float(default=0)
               + states('sensor.foxess_modbus_grid_consumption') | float(default=0)
               + states('sensor.foxess_modbus_battery_ischarge') | float(default=0)
               - states('sensor.foxess_modbus_battery_charge') | float(default=0)
               - states('sensor.foxess_modbus_feed_in_power') | float(default=0)
               - states('sensor.foxess_modbus_load_power') | float(default=0) )) | round(2) }}

# Utility Meters _ Provides meters to be used with the energy dashboard and reset daily
utility_meter:
  load_daily:
    source: sensor.foxess_modbus_load_sum
    cycle: daily
  pv1_daily:
    source: sensor.foxess_modbus_pv1_sum
    cycle: daily
  pv2_daily:
    source: sensor.foxess_modbus_pv2_sum
    cycle: daily
  bat_charge_daily:
    source: sensor.foxess_modbus_bat_charge_sum
    cycle: daily
  bat_discharge_daily:
    source: sensor.foxess_modbus_bat_discharge_sum
    cycle: daily
  feedin_daily:
    source: sensor.foxess_modbus_feedin_sum
    cycle: daily
  grid_daily:
    source: sensor.foxess_modbus_grid_consumption_sum
    cycle: daily
  losses_daily:
    source: sensor.foxess_modbus_losses_sum
    cycle: daily
